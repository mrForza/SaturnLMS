version: "3.8"

services:
  profile_service:
    container_name: profileService.api
    build:
      context: .
      dockerfile: ./profile_service/Dockerfile
    environment:
      - CONFIG_PATH=./configs
    expose:
      - "8080"
    ports:
      - "8080:8080"
    depends_on:
      profile_database:
        condition: service_started
    networks:
      - profileNetwork
      - servicesNetwork

  profile_database:
    container_name: profileService.postgres
    image: postgres:latest
    restart: on-failure
    expose:
      - "5432"
    ports:
      - "5432:5432"
    env_file:
      - ./profile_service/configs/db.env
    volumes:
      - profileService.postgres.data:/var/lib/postgresql/profiles:rw
      - ./profile_service/configs/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s
    networks:
      - profileNetwork

  organization_service:
    container_name: organizationService.api
    build:
      context: .
      dockerfile: ./organization_service/Dockerfile
    environment:
      - CONFIG_PATH=./configs
    expose:
      - "8081"
    ports:
      - "8081:8081"
    depends_on:
      organization_database:
        condition: service_started
      profile_service:
        condition: service_started
    networks:
      - organizationNetwork
      - servicesNetwork

  organization_database:
    container_name: organizationService.postgres
    image: postgres:latest
    restart: on-failure
    expose:
      - "5433"
    ports:
      - "5433:5432"
    env_file:
      - ./organization_service/configs/db.env
    volumes:
      - organizationService.postgres.data:/var/lib/postgresql/profiles:rw
      - ./organization_service/configs/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s
    networks:
      - organizationNetwork

  study_service:
    container_name: studyService.api
    build:
      context: .
      dockerfile: ./study_service/Dockerfile
    environment:
      - CONFIG_PATH=./configs
    expose:
      - "8083"
    ports:
      - "8083:8083"
    depends_on:
      study_database:
        condition: service_started
      profile_service:
        condition: service_started
    networks:
      - organizationNetwork
      - servicesNetwork
      - studyNetwork

  study_database:
    image: mongo:latest
    container_name: studyService.mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: secret
    volumes:
      - studyService.mongo.data:/data/db
    networks:
      - studyNetwork
    restart: unless-stopped

  study_migrator:
    build:
      context: .
      dockerfile: ./study_service/Dockerfile.migrate
    depends_on:
      study_database:
        condition: service_started
    networks:
      - studyNetwork

  study_storage:
    image: minio/minio:latest
    container_name: studyService.minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password123
    volumes:
      - studyService.mongo.data:/data
    command:
      - server
      - /data
      - --console-address
      - :9001
    restart: unless-stopped
    networks:
      - studyNetwork

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    # networks:
    #   - kafka-net
    restart: unless-stopped

  # assessment_service:

  # api_gateway:

networks:
  profileNetwork: { }
  organizationNetwork: { }
  studyNetwork: { }
  servicesNetwork: { }

volumes:
  profileService.postgres.data: { }
  organizationService.postgres.data: { }
  studyService.mongo.data: { }
  studyService.minion.data: { }